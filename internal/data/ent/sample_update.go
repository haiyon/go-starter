// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-starter/internal/data/ent/predicate"
	"go-starter/internal/data/ent/sample"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleUpdate is the builder for updating Sample entities.
type SampleUpdate struct {
	config
	hooks    []Hook
	mutation *SampleMutation
}

// Where appends a list predicates to the SampleUpdate builder.
func (su *SampleUpdate) Where(ps ...predicate.Sample) *SampleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SampleUpdate) SetName(s string) *SampleUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SampleUpdate) SetNillableName(s *string) *SampleUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// ClearName clears the value of the "name" field.
func (su *SampleUpdate) ClearName() *SampleUpdate {
	su.mutation.ClearName()
	return su
}

// SetContent sets the "content" field.
func (su *SampleUpdate) SetContent(s string) *SampleUpdate {
	su.mutation.SetContent(s)
	return su
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (su *SampleUpdate) SetNillableContent(s *string) *SampleUpdate {
	if s != nil {
		su.SetContent(*s)
	}
	return su
}

// ClearContent clears the value of the "content" field.
func (su *SampleUpdate) ClearContent() *SampleUpdate {
	su.mutation.ClearContent()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SampleUpdate) SetUpdatedAt(t time.Time) *SampleUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SampleUpdate) ClearUpdatedAt() *SampleUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// Mutation returns the SampleMutation object of the builder.
func (su *SampleUpdate) Mutation() *SampleMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SampleUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SampleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SampleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SampleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SampleUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		v := sample.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *SampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sample.Table, sample.Columns, sqlgraph.NewFieldSpec(sample.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(sample.FieldName, field.TypeString, value)
	}
	if su.mutation.NameCleared() {
		_spec.ClearField(sample.FieldName, field.TypeString)
	}
	if value, ok := su.mutation.Content(); ok {
		_spec.SetField(sample.FieldContent, field.TypeString, value)
	}
	if su.mutation.ContentCleared() {
		_spec.ClearField(sample.FieldContent, field.TypeString)
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(sample.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(sample.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(sample.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SampleUpdateOne is the builder for updating a single Sample entity.
type SampleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SampleMutation
}

// SetName sets the "name" field.
func (suo *SampleUpdateOne) SetName(s string) *SampleUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableName(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// ClearName clears the value of the "name" field.
func (suo *SampleUpdateOne) ClearName() *SampleUpdateOne {
	suo.mutation.ClearName()
	return suo
}

// SetContent sets the "content" field.
func (suo *SampleUpdateOne) SetContent(s string) *SampleUpdateOne {
	suo.mutation.SetContent(s)
	return suo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (suo *SampleUpdateOne) SetNillableContent(s *string) *SampleUpdateOne {
	if s != nil {
		suo.SetContent(*s)
	}
	return suo
}

// ClearContent clears the value of the "content" field.
func (suo *SampleUpdateOne) ClearContent() *SampleUpdateOne {
	suo.mutation.ClearContent()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SampleUpdateOne) SetUpdatedAt(t time.Time) *SampleUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SampleUpdateOne) ClearUpdatedAt() *SampleUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// Mutation returns the SampleMutation object of the builder.
func (suo *SampleUpdateOne) Mutation() *SampleMutation {
	return suo.mutation
}

// Where appends a list predicates to the SampleUpdate builder.
func (suo *SampleUpdateOne) Where(ps ...predicate.Sample) *SampleUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SampleUpdateOne) Select(field string, fields ...string) *SampleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sample entity.
func (suo *SampleUpdateOne) Save(ctx context.Context) (*Sample, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SampleUpdateOne) SaveX(ctx context.Context) *Sample {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SampleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SampleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SampleUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		v := sample.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *SampleUpdateOne) sqlSave(ctx context.Context) (_node *Sample, err error) {
	_spec := sqlgraph.NewUpdateSpec(sample.Table, sample.Columns, sqlgraph.NewFieldSpec(sample.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sample.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sample.FieldID)
		for _, f := range fields {
			if !sample.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sample.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(sample.FieldName, field.TypeString, value)
	}
	if suo.mutation.NameCleared() {
		_spec.ClearField(sample.FieldName, field.TypeString)
	}
	if value, ok := suo.mutation.Content(); ok {
		_spec.SetField(sample.FieldContent, field.TypeString, value)
	}
	if suo.mutation.ContentCleared() {
		_spec.ClearField(sample.FieldContent, field.TypeString)
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(sample.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(sample.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sample.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Sample{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
